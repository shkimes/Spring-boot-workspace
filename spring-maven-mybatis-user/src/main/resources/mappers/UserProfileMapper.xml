<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Java 어떤 파일에 sql문을 보낼지 경로 설정 namespace 내에 mapper 경로 작성 -->
<mapper namespace="com.kh.khtAcademy.mapper.UserProfileMapper">

    <!--
    Error 가 발생해서 resultMap이나 resultType을 사용하라는 답볃을 얻게 되었을 경우 아래와 같이 사용할 것을 권장할 것
    하지만 현재 우리가 작성한 프로젝트는 mybatis-config.xml에 아래와 같이 자바 필드 이름과 SQL 컬럼 이름을 서로 연결시켜주는
    구문을 사용했기 때문에 아래와 같은 코드를 작성할 이유가 없음!!!!

    1번 방안 xml 에 작성한 #{자바변수명} 부터 serviceImpl, controller, html ${자바변수명} 과
             dto에 작성한 자바 변수명이 일치하는지를 확인할 것
    2번 방안 model.addAttribute("html에서 사용할 명칭", service변수명);
            html에서 모든 상품이나 사람을 조회할 때 html에서 사용할 명칭과 html에서 작성한 명칭이 일치하는지 확인할 것

    3번 방안 mapper namespace 에 작성한 패키지이름.mapper.매퍼자바파일이름이 실제로 만들어진 파일 이름과 일치하는지 확인

    mapperScan 이라는 어노테이션을 @SpringBootApplication 위나 아래에 작성하라고 해결방안을 제시한 경우
    mapper.xml  -  mapper.java  -  service.java  -  serviceImpl.java  -  controller.java
     id               method           method           method               method

     id 부터 method 명칭이 모두 일치하는지 확인
     ※ 단 void나 return 자료형은 일치하지 않아도 됨.
      오로지 method 기능 명칭만 일치하는지 확인
      왜냐하면 스프링부트에서 사용하는 @ 어노테이션이 기능이름이 다를 경우 읽지 못하는 경우가 있음

      ex)  mapper.xml       id = getAllUser
           mapper.java      method = getAllUser
           service.java     method = allViewUser
           serviceImpl.java method = allViewUser  return  mapper.getAllUser();
           ===> 기능명칭이 getAllUser에서 allViewUser로 변경되었기 때문에 읽지 못함

           mapper.xml 에서 부터 controller까지 기능명칭 통일







        <resultMap id="밑에서 resultType으로 가져올 id명" type="com.kh.khtAcademy.dto.User">
            <id property="userId" column="USER_ID"/>
            <result property="username" column="USERNAME"/>
            <result property="email" column="EMAIL"/>
            <result property="birthdate" column="BIRTHDATE"/>
            <result property="accountBalance" column="ACCOUNT_BALANCE"/>
            <result property="gender" column="GENDER"/>
            <result property="hobbies" column="HOBBIES"/>

        </resultMap>
        모든 유저 조회 SQL : USERPROFILE 테이블에 저장되어 있는 유저들을 모두 조회
         <select id="getAllUsers" resultType="com.kh.khtAcademy.dto.User"  resultMap="밑에서 resultType으로 가져올 id명">
        SELECT * FROM USERPROFILE
        </select>
    -->

    <!-- sql문을 mapper.java로 보낼 때 java에서 sql 기능을 사용할 수 있도록 보낼 기능이름을 id에 작성 -->
    <!-- 모든 유저 조회 SQL : USERPROFILE 테이블에 저장되어 있는 유저들을 모두 조회 -->
    <select id="getAllUsers">
        SELECT *
        FROM USERPROFILE
    </select>

    <!-- 유저 저장 SQL : 이름, 이메일, 생년월일, 계좌잔액, 성별, 취미 모두 작성이 잘 된 경우
                        * 유저아이디(저장순서번호)는 자동으로 번호매김이 순차적으로 되기 때문에
                                                    유저가 직접 작성하지 않음
     -->
    <insert id="insertUser">
        INSERT INTO USERPROFILE (USERNAME, EMAIL, BIRTHDATE, ACCOUNT_BALANCE, GENDER, HOBBIES, PROFILE_IMAGE_PATH)
        VALUES (#{username}, #{email}, #{birthdate}, #{accountBalance}, #{gender}, #{hobbies}, #{profileImagePath});
    </insert>

    <!-- 이름 찾기 SQL : 일치하는 이메일이 조회되는 경우 -->
    <select id="findByUsername">
        SELECT USERNAME
        FROM USERPROFILE
        WHERE EMAIL = #{email}
    </select>

    <!-- 이메일 찾기 SQL : 유저이름과 성별이 일치하는 경우 -->
    <select id="findByEmail">
        SELECT EMAIL
        FROM USERPROFILE
        WHERE USERNAME = #{username}
          AND GENDER = #{gender}
    </select>

    <!-- 특정회원에 대해서 상세보기 or 추후 제품 상세 페이지 -->
    <select id="getUser">
        SELECT *
        FROM USERPROFILE
        WHERE USER_ID = #{userId}
    </select>


    <select id="login">
        SELECT *
        FROM USERPROFILE
        WHERE USERNAME = #{username}
          AND   EMAIL = #{email}
    </select>

    <select id="searchHobby">
        SELECT *
        FROM USERPROFILE
        WHERE HOBBIES LIKE CONCAT('%', #{hobbies}, '%')
    </select>

    <!-- 아이디 중복확인 SQL : username이 일치하는 회원이 조회되는 경우 -->
    <select id="checkDuplicatedUsername">
        SELECT COUNT(*)
        FROM USERPROFILE
        WHERE USERNAME = #{username}
    </select>












    <!--
    Error  Whitelabel Error Page 에서
    SQL 글자가 보이면 무조건 xml 파일 내 sql 구문 작성이 잘못된 것
    1. # 을 모두 자바변수명을 감쌀 때 작성했는지 확인
    2. {} 제대로 작성했는지 확인
    3. , 구분자 제대로 작성했는지 확인
    bad SQL grammar

    <select id="기능명칭">
    SELECT 컬럼명, 컬럼명, 컬럼명, ...
    FROM   테이블명
    WHERE  컬럼명 = #{자바변수명}
    </select>

    MyBatis 회사는 SQL 컬럼명을 우선으로 하기 때문에
    SQL 컬럼명은 마치 자바변수이름 작성하듯이 작성하면 되지만,
    자바 변수명은 #{} 안에 작성해야 함
    -->
</mapper>